import os
import tempfile
import logging

from aiogram import types
from aiogram.filters import Command
from aiogram.types import FSInputFile

from bot_loader import bot, dp
from .database import register_user, get_profile, increment_video_note
from .video_processing import process_video

logger = logging.getLogger(__name__)

MAX_FILE_SIZE_BYTES = 20 * 1024 * 1024

@dp.message(Command("start"))
async def handle_start(msg: types.Message):
    await register_user(msg.from_user.id)
    await msg.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–∂–∫–∞. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )

@dp.message(Command("profile"))
async def handle_profile(msg: types.Message):
    await register_user(msg.from_user.id)
    profile = await get_profile(msg.from_user.id)
    await msg.answer(
        f"üÜî ID: <code>{profile['id']}</code>\n\n"
        f"üéû –°–æ–∑–¥–∞–Ω–æ –∫—Ä—É–∂–∫–æ–≤: <code>{profile['video_note_count']}</code>",
        parse_mode="HTML"
    )

@dp.message(Command("help"))
async def handle_help(msg: types.Message):
    await msg.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/profile - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/change_size - –ö–∞–∫ —É–º–µ–Ω—å—à–∏—Ç—å –≤–µ—Å –≤–∏–¥–µ–æ\n"
        "/forward - –ö–∞–∫ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫—Ä—É–∂–æ–∫ –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )

@dp.message(Command("change_size"))
async def handle_change_size(msg: types.Message):
    photo_file_id = "AgACAgIAAxkDAAIBpmg5drP-7WNiacYcsP_dh70KzYA7AAIw8jEbM3vRSQxJLKL1WXcuAQADAgADdwADNgQ"
    caption = (
        "–î–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π "
        "—Å–Ω–∏–∂–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –≤–∏–¥–µ–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."
    )
    await msg.answer_photo(photo_file_id, caption=caption)

@dp.message(Command("forward"))
async def handle_forward(msg: types.Message):
    video_file_id = "BAACAgIAAxkDAAIBvmg5edSXijhfAkNzfFhKflR2iwhhAAIfcQACiT_QSRMH1kpwJ7OUNgQ"
    caption = (
        "–ö–∞–∫ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫—Ä—É–∂–æ–∫ –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ (–±–µ–∑ –ø–æ–º–µ—Ç–∫–∏ \"–ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç\"):\n\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä—É–∂–æ–∫, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ \"–ü–µ—Ä–µ—Å–ª–∞—Ç—å\".\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\n"
        "3. –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –≤ –æ–∫–Ω–µ —á–∞—Ç–∞, –∫–æ—Å–Ω–∏—Ç–µ—Å—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ –∫—Ä—É–∂–∫–∞ (–æ–Ω –±—É–¥–µ—Ç –Ω–∞–¥ –ø–æ–ª–µ–º –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞).\n"
        "4. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ \"–°–∫—Ä—ã—Ç—å –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\".\n"
        "5. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å."
    )
    await msg.answer_video(
        video=video_file_id,
        caption=caption
    )

@dp.message(lambda m: m.video)
async def handle_video(msg: types.Message):
    status_message = None
    temp_files = []

    try:
        if msg.video.file_size > MAX_FILE_SIZE_BYTES:
            video_size_mb = msg.video.file_size / 1024 / 1024
            await msg.answer(
                f"‚ùå –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç.\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë. –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ: {video_size_mb:.2f} –ú–ë.\n\n"
                f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É–º–µ–Ω—å—à–µ–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å: /change_size"
            )
            logger.warning(
                f"Video too large from user {msg.from_user.id}. Size: {video_size_mb:.2f}MB"
            )
            return

        status_message = await msg.answer("üì• –ó–∞–≥—Ä—É–∑–∫–∞...")
        await register_user(msg.from_user.id)

        file = await bot.get_file(msg.video.file_id)
        file_data_stream = await bot.download_file(file.file_path)

        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_input_file:
            temp_input_file.write(file_data_stream.read())
            input_path = temp_input_file.name
            temp_files.append(input_path)

        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_output_file:
            output_path = temp_output_file.name
            temp_files.append(output_path)

        await status_message.edit_text("üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        await process_video(input_path, output_path)

        await status_message.edit_text("üì§ –í—ã–≥—Ä—É–∑–∫–∞...")
        video_note_to_send = FSInputFile(output_path)
        await msg.answer_video_note(video_note_to_send)
        await increment_video_note(msg.from_user.id)

    except ValueError as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.warning(f"ValueError in handle_video for user {msg.from_user.id}: {str(e)}")
    except RuntimeError as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e).splitlines()[-1]}")
        logger.error(f"RuntimeError in handle_video for user {msg.from_user.id}: {str(e)}", exc_info=True)
    except Exception as e:
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.")
        logger.error(f"Unhandled exception in handle_video for user {msg.from_user.id}: {str(e)}", exc_info=True)
    finally:
        if status_message:
            try:
                await status_message.delete()
            except Exception as e:
                logger.error(f"Error deleting status message: {str(e)}")
        
        for path in temp_files:
            try:
                if os.path.exists(path):
                    os.remove(path)
            except Exception as e:
                logger.error(f"Error cleaning up temporary file {path}: {str(e)}")

@dp.message()
async def handle_unknown(msg: types.Message):
    await msg.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
